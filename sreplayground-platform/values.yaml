# Default values for playground.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  clusterName: ""

ingress-nginx:
  enabled: true
  controller:
    image:
      tag: "v1.6.4"
ingress:
  enabled: false
loki-stack:
  loki:
    enabled: true
    isDefault: false
    url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
    image:
      tag: "2.6.1"
  prometheus:
    enabled: false
  filebeat:
    enabled: false
  logstash:
    enabled: false
  promtail:
    enabled: false
  fluent-bit:
    enabled: false
  grafana:
    enabled: false

fluent-bit:
  enabled: true
  logLevel: info
  metricsPort: 2020
  flush: 1
  image:
    tag: "2.0.9"
  config:
    customParsers: |
      [PARSER]
          Name docker_no_time
          Format json
          Time_Keep Off
          Time_Key time
          Time_Format %Y-%m-%dT%H:%M:%S.%L
    extraFiles: 
      labelmap.json: |-
        {
          "kubernetes": {
            "container_name": "container",
            "host": "node",
            "labels": {
              "app": "app",
              "app.kubernetes.io/name": "job"
            },
            "namespace_name": "namespace",
            "pod_name": "instance"
          },
          "stream": "stream"
        }
    filters: |
      [FILTER]
          Name kubernetes
          Match kube.*
          Kube_URL https://kubernetes.default.svc:443
          Merge_Log On
          Keep_Log On
          K8S-Logging.Parser On
          K8S-Logging.Exclude On
    inputs: |
      [INPUT]
          Name tail
          Path /var/log/containers/*.log
          multiline.parser docker, cri
          Tag kube.*
          Mem_Buf_Limit 5MB
          Skip_Long_Lines On
      [INPUT]
          Name systemd
          Tag host.*
          Systemd_Filter _SYSTEMD_UNIT=kubelet.service
          Read_From_Tail On
    outputs: |
      [Output]
          Name loki
          host {{ .Release.Name }}-loki
          port 3100
          http_user admin
          http_passwd admin
          Match kube.*
          labels job=kubernetes
          label_map_path /fluent-bit/etc/labelmap.json
          remove_keys kubernetes,stream
    service: |
      [SERVICE]
          Daemon Off
          Flush {{ .Values.flush }}
          Log_Level {{ .Values.logLevel }}
          Parsers_File custom_parsers.conf
          HTTP_Server On
          HTTP_Listen 0.0.0.0
          HTTP_Port {{ .Values.metricsPort }}
          Health_Check On
    upstream: {}
  tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: "Exists"

thanos:
  enabled: true
  query:
    enabled: true
    dnsDiscovery:
      enabled: true
      sidecarsService: "prometheus-operated"
      sidecarsNamespace: "{{ .Release.Namespace }}"
  receive: 
    enabled: true
  storegateway:
    enabled: true
  objstoreConfig: ""

kube-prometheus-stack:
  enabled: true
  prometheus:
    thanosService:
      enabled: true
    thanosServiceMonitor:
      enabled: true
    prometheusSpec:
      thanos:
        baseImage: quay.io/thanos/thanos
        version: v0.24.0
        objectStorageConfig:
          key: thanos.yaml
          name: ""
      additionalScrapeConfigs:
      - job_name: 'kubernetes-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_k8s_app]
            action: keep
            regex: cilium
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: (.+)(?::\d+);(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: service
        # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L156
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+):(?:\d+);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            action: keep
            regex: \d+
        # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L119
      - job_name: 'kubernetes-services'
        metrics_path: /metrics
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: ${1}:${2}
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service  
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
    ingress:
      annotations: {}
      ingressClassName: nginx
      enabled: true
      hosts:
      - prometheus.{{ .Release.Name }}.devops.nakednerds.net
      labels: {}
      paths: []
      tls: []
  grafana:
    enabled: true
    adminPassword: prom-operator
    ingress:
      annotations: {}
      ingressClassName: nginx
      enabled: true
      hosts:
      - grafana.green-platform.devops.nakednerds.net
      labels: {}
      paths: []
      tls: []
    additionalDataSources:
    - editable: false
      isDefault: false
      name: Jaeger
      access: proxy
      type: jaeger
      uid: webstore-traces
     # url: http://sreplayground-platform-jaeger-query.platform.svc:16686
      url: http://{{ printf "%s-jaeger-query" .Release.Name }}:16686
    - name: Loki
      editable: false
      type: loki
      access: proxy
      url: https://{{ printf "%s-loki" .Release.Name }}:3100
      version: 1
      isDefault: false
      jsonData:
        derivedFields:
        - datasourceUid: Jaeger
          matcherRegex: "trace_id=(\\w+)"
          name: TraceID
          url: "$${__value.raw}"

    extraConfigmapMounts:
    - mountPath: /tmp/dashboards/cilium/cilium-dashboard
      name: cilium-dashboard
      configMap: grafana-cilium-dashboard
      subPath: ""
      readOnly: true
    - mountPath: /tmp/dashboards/cilium/operator-dashboard
      name: cilium-operator-dashboard
      configMap: grafana-cilium-operator-dashboard
      subPath: ""
      readOnly: true
    - mountPath: /tmp/dashboards/cilium/hubble-dashboard
      name: grafana-hubble-dashboard
      configMap: grafana-hubble-dashboard
      subPath: ""
      readOnly: true

metrics-server:
  enabled: false

opentelemetry-collector:
  enabled: true
  nameOverride: otel-collector-hub
  mode: deployment
  hostNetwork: false
  config:
    exporters:
      logging: {}
      otlp:
        endpoint: '{{ .Release.Name }}-jaeger-collector.{{ .Release.Name }}.svc.cluster.local:4317'
        tls: 
          insecure: true
    extensions:
      health_check: {}
      memory_ballast: {}
    processors:
      batch: {}
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${MY_POD_IP}:6831
          thrift_http:
            endpoint: ${MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:4317
          http:
            endpoint: ${MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${MY_POD_IP}:8888
    service:
      extensions:
      - health_check
      - memory_ballast
      pipelines:
        traces:
          exporters:
          - logging
          - otlp
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
      telemetry:
        metrics:
          address: ${MY_POD_IP}:8888

jaeger-operator:
  enabled: true
  clusterName: ""